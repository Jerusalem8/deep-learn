1.评估算法优劣的核心指标
①时间复杂度（流程决定）：程序中所有常数时间操作的发生次数总和（最终只取最高阶项，忽略低阶项和所有项系数）
②额外空间复杂度（流程决定）：
作为输入参数、输出结果的空间不算额外空间，因为这些都是必要的，和现实目标有关。
除此之外，由于算法流程需要而额外开辟的空间，就属于额外空间复杂度。
③常数项时间（实现细节决定）：
如果要“拼常数时间”，放弃理论分析，生成随机数据直接测。

最优解：一般情况下，优先满足时间复杂度最低，再使用最少的空间的算法流程，称为最优解。

何为常数时间的操作？=》O（1）
操作的执行时间不以具体样本量为转移，每次执行时间都是固定时间。

常见的常数时间的操作：
算术运算（+、-、*、/、%等）
位运算（>>、>>>、<<、|（或）、&（与）、^（异或）等）
赋值、比较、自增、自减操作等
数组寻址操作

>>：带符号右移
>>>：不带符号右移
注：正数最高符号位为0，负数最高符号位为1

如何确定算法流程的总操作数量与样本数量之间的表达式关系？
1.想象该算法流程所处理的数据状况，按最差情况来；
2.把整个流程彻底拆分为一个个基本动作，保证每个动作都是常数时间的操作；
3.如果数据量为N，看看基本动作的数量和N是什么关系。

常见的时间复杂度（从好到差）：O(1)、O（logN）、O（N）、O（N*logN）、O（N^2）、O（幂数级）、O（2^N）、O（指数级）、O（N！）【常、对、幂、指、阶】

2.对数器（具体事例见class01 SelectionSort）
（1）有一个想要测的方法a
（2）实现复杂度不好但是容易实现的方法b
（3）实现一个随机样本产生器
（4）把方法a和方法b跑相同的随机样本，看看得到的结果是否一样
（5）如果有一个随机样本使得比对结果不一致，打印样本进行人工干预，改对方法a和方法b
（6）当样本数量很多时比对测试依然正确，可以确定方法a已经正确。

3.二分法
1)在一个有序数组中，找某个数是否存在
2)在一个有序数组中，找>=某个数最左侧的位置
3)在一个有序数组中，找<=某个数最右侧的位置
4)局部最小值问题

4.异或运算
异或运算：相同为0，不同为1（可以理解为 无进位相加）
性质：同一批数异或起来的结果一样
同或运算：相同为1，不同为0

异或运算的应用：
（1）交换两个数a和b的值
（2）一个数组中有一个数出现奇数次，其他数都出现偶数次，找到并打印这个数
    答：把所有的数异或起来，最终结果就是要找的数
（3）取某一整型数字N最右侧的1（二进制的1），设结果为X
    做法：X = N &（~N + 1）
（4）一个数组中有两个数出现奇数次，其他数都出现偶数次，找到并打印这两个数
具体做法看视频 https://www.bilibili.com/video/BV1NU4y1M7rF?p=40  2小时25分钟左右（讲的非常好，通俗易懂）


★运算规则★
1.按位与运算符（&）
参加运算的两个数据，按二进制位进行“与”运算。

运算规则：0&0=0;  0&1=0;  1&0=0;  1&1=1;     即：两位同时为“1”，结果才为“1”，否则为0

另，负数按补码形式参加按位与运算。

“与运算”的特殊用途：
（1）清零。如果想将一个单元清零，即使其全部二进制位为0，只要与一个各位都为零的数值相与，结果为零。
（2）取一个数中指定位（找一个数，对应X要取的位，该数的对应位为1，其余位为零，此数与X进行“与运算”可以得到X中的指定位）
    例：设X=10101110，取X的低4位，用 X & 0000 1111 = 00001110 即可得到；


2.按位或运算符（|）
参加运算的两个对象，按二进制位进行“或”运算。

运算规则：0|0=0；  0|1=1；  1|0=1；   1|1=1；    即 ：参加运算的两个对象只要有一个为1，其值为1。

“或运算”特殊作用：
（1）常用来对一个数据的某些位 置为1。（找到一个数，对应X要置1的位，该数的对应位为1，其余位为零。此数与X相或可使X中的某些位置1）
    例：将X=10100000的低4位置1 ，用X | 0000 1111 = 1010 1111即可得到；


3.异或运算符（^）
参加运算的两个数据，按二进制位进行“异或”运算。

运算规则：0^0=0；  0^1=1；  1^0=1；   1^1=0；    即：参加运算的两个对象，如果两个相应位为“异”（值不同），则该位结果为1，否则为0。

“异或运算”的特殊作用：
（1）使特定位翻转找一个数，对应X要翻转的各位，该数的对应位为1，其余位为零，此数与X对应位异或即可。
    例：X=10101110，使X低4位翻转，用X ^0000 1111 = 1010 0001即可得到；
（2）与0相异或，保留原值 ，X ^ 00000000 = 1010 1110。


4.取反运算符（~）
参加运算的一个数据，按二进制位进行“取反”运算。

运算规则：~1=0；  ~0=1    即：对一个二进制数按位取反，即将0变1，1变0。
“~”运算符的优先级比算术运算符、关系运算符、逻辑运算符和其他运算符都高。

5.左移运算符（<<）
将一个运算对象的各二进制位全部左移若干位（左边的二进制位丢弃，右边补0）。

例：a = a << 2将a的二进制位左移2位，右补0，若左移时舍弃的高位不包含1，则每左移一位，相当于该数乘以2。

6.右移运算符（>>）
将一个数的各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃。

例如：a = a >> 2 将a的二进制位右移2位，操作数每右移一位，相当于该数除以2。


7.无符号右移运算符（>>>）
>>>运算符把 expression1的各个位向右移expression2指定的位数。右移后左边空出的位用零来填充。移出右边的位被丢弃。

例如：var temp = -14 >>>2
变量 temp的值为 -14 （即二进制的 11111111 11111111 1111111111110010），向右移两位后等于 1073741820 （即二进制的 00111111 11111111 1111111111111100）



